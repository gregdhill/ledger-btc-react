{"version":3,"sources":["bitcoin.ts","components/SelectAddresses.tsx","components/SelectOutputs.tsx","components/SignAndSend.tsx","App.tsx","serviceWorker.ts","index.tsx","ledger.ts"],"names":["BitcoinApi","txApi","addrApi","blockApi","basePath","this","esplora","txid","getTxHex","data","addr","getAddress","info","chain_stats","funded_txo_sum","spent_txo_sum","getAddressUtxo","map","utxo","value","vout","key","hex","postTx","result","satToBtc","sat","Math","pow","SelectAddresses","state","loaded","accIndex","accounts","Map","index","props","size","setState","loadAccounts","cb","get","checked","set","updateAccount","length","promises","i","ledger","appBtc","push","apiBtc","getAccountValue","then","Promise","all","e","target","removeAccountOutputs","Jumbotron","fluid","Row","className","Col","Table","striped","bordered","hover","acc","type","onChange","bind","text","style","cursor","Button","onClick","Component","SelectOutputs","outputs","total","filter","getAccountUtxos","utxos","flat","addOutput","removeOutput","Form","Group","has","substr","toString","LoadingButton","variant","disabled","Spinner","as","animation","role","aria-hidden","SignAndSend","recipient","satoshis","txFee","isSigning","isSending","forEach","broadcastTx","txId","error","undefined","txHex","a","getHexTransaction","createTransaction","event","name","controlId","Label","Control","placeholder","handleChange","readOnly","sendTx","window","open","getTxLink","Alert","message","App","currentStep","isConnecting","_next","_prev","app","delete","Container","connect","previousButton","nextButton","reduce","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","toBufferLE","num","width","buffer","Buffer","from","padStart","slice","reverse","derivePath","keys","purpose","coinType","account","change","deriveKeySet","TESTNET","getLedgerTransport","transport","AppBtc","getWalletAddress","getWalletPublicKey","format","bitcoinAddress","amount","toAddress","txs","tx","splitTransaction","script","bitcoin","p2wpkh","address","network","testnet","outputScript","serializeTransactionOutputs","version","inputs","BigInt","output","createPaymentTransactionNew","associatedKeysets","outputScriptHex","segwit","additionals","isWebUsbSupported","webUsbTransport","isSupported","platform","os","family","create","u2fTransport"],"mappings":"8bAkBaA,G,MAAb,WAKE,aAAe,yBAJfC,WAIc,OAHdC,aAGc,OAFdC,cAEc,EACZ,IAAMC,EAAW,uCACjBC,KAAKJ,MAAQ,IAAIK,QAAc,CAAEF,SAAUA,IAC3CC,KAAKH,QAAU,IAAII,aAAmB,CAAEF,SAAUA,IAClDC,KAAKF,SAAW,IAAIG,WAAiB,CAAEF,SAAUA,IATrD,uGAY0BG,GAZ1B,iFAakBF,KAAKJ,MAAMO,SAASD,GAbtC,uCAa6CE,MAb7C,sLAiBwBC,GAjBxB,uFAkBwBL,KAAKH,QAAQS,WAAWD,GAlBhD,cAkBUE,EAlBV,OAkBuDH,KAlBvD,mBAoBOG,EAAKC,YAAYC,gBAAkB,IACnCF,EAAKC,YAAYE,eAAiB,IArBzC,sLA0BwBL,GA1BxB,uFA2BwBL,KAAKH,QAAQc,eAAeN,GA3BpD,cA2BUE,EA3BV,OA2B2DH,KA3B3D,kBA4BWG,EAAKK,KAAI,SAACC,GACf,MAAO,CACLX,KAAMW,EAAKX,KACXY,MAAOD,EAAKC,MACZC,KAAMF,EAAKE,KACXV,KAAMA,EAENW,IAAK,WACH,MAAM,GAAN,OAAUH,EAAKX,MAAf,OAAsBW,EAAKE,YApCrC,kLA0CoBE,GA1CpB,uFA2CyBjB,KAAKJ,MAAMsB,OAAOD,GA3C3C,cA2CUE,EA3CV,yBA4CWA,EAAOf,MA5ClB,+GAyDO,SAASgB,EAASC,GAEvB,OAAOA,EAAMC,KAAKC,IAAI,GAAI,G,sHCtDPC,E,4MACnBC,MAAe,CACbC,QAAQ,EACRC,SAAU,EACVC,SAAU,IAAIC,K,qLAIRC,EAAQ9B,KAAK+B,MAAMH,SAASI,KAClChC,KAAKiC,SAAS,CACZL,SAAU5B,KAAK+B,MAAMH,SACrBD,SAAUG,IAEE,IAAVA,E,gCACI9B,KAAKkC,aA9BQ,G,6BAgCnBlC,KAAKiC,SAAS,CAAEP,QAAQ,I,0IAIdrB,EAAc8B,GAA+C,IACjEP,EAAa5B,KAAKyB,MAAlBG,SACFrB,EAAO4B,EACXP,EAASQ,IAAI/B,IAAS,CAAEgC,SAAS,EAAOP,MAAO,EAAGhB,MAAO,IAE3Dc,EAASU,IAAIjC,EAAME,GACnBP,KAAKiC,SAAS,CAAEL,aAChB5B,KAAK+B,MAAMQ,cAAclC,GAAM,kBAAME,O,4EAGpBiC,G,oFACXV,EAAQ9B,KAAKyB,MAAME,SACrBc,EAAW,G,uBACNC,G,2FACYC,mBAAwB,EAAKZ,MAAMa,OAAQF,G,OAAxDrC,E,OACAuB,EAAW,EAAKH,MAAMG,SACtBrB,EAAO,CAAE8B,SAAS,EAAOP,MAAOY,EAAG5B,MAAO,GAChD,EAAKyB,cAAclC,GAAM,kBAAME,KAE/BkC,EAASI,KAEP,EAAKd,MAAMe,OAAOC,gBAAgB1C,GAAM2C,MAAK,SAAClC,GAC5C,IAAMc,EAAW,EAAKH,MAAMG,SAC5B,EAAKW,cAAclC,GAAM,SAACE,GAExB,OADAA,EAAKO,MAAQA,EACNP,KAGT,EAAK0B,SAAS,CACZL,SAAUA,QAKhB,EAAKK,SAAS,CACZL,SAAUA,I,0CAtBLc,EAAIZ,E,YAAOY,EAAIZ,EAAQU,G,yCAAvBE,G,eAA+BA,I,uCAyBlCO,QAAQC,IAAIT,G,QAClBzC,KAAKiC,SAAS,CACZP,QAAQ,EACRC,SAAUG,EAAQU,I,uIAIbnC,EAAc8C,GAAyC,IACtDd,EAAYc,EAAEC,OAAdf,QACRrC,KAAKuC,cAAclC,GAAM,SAACE,GAExB,OADAA,EAAK8B,QAAUA,EACR9B,KAIJ8B,GACHrC,KAAK+B,MAAMsB,qBAAqBhD,K,+BAI1B,IAAD,OACP,OACE,6BACE,kBAACiD,EAAA,EAAD,CAAWC,OAAK,GACd,iDAGF,kBAACC,EAAA,EAAD,CAAKC,UAAU,6BACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,6BACA,6BACA,uCACA,uCAGJ,+BACG,YAAI9D,KAAKyB,MAAMG,UAAUhB,KAAI,SAACmD,GAC7B,OACE,wBAAI/C,IAAK+C,EAAI,IACX,4BACE,2BACEC,KAAK,WACLlD,MAAOiD,EAAI,GACXE,SAAU,EAAKA,SAASC,KAAK,EAAMH,EAAI,IACvC1B,QAAS0B,EAAI,GAAG1B,WAGpB,4BACE,kBAAC,IAAD,CAAiB8B,KAAMJ,EAAI,IACzB,kBAAC,IAAD,CAAaK,MAAO,CAAEC,OAAQ,eAGlC,4BAAKN,EAAI,IACT,4BAAK3C,EAAS2C,EAAI,GAAGjD,OAArB,gBAQd,kBAAC0C,EAAA,EAAD,CAAKC,UAAU,6BACZzD,KAAKyB,MAAMC,QACV,kBAAC4C,EAAA,EAAD,CACEC,QAAS,WACP,EAAKtC,SAAS,CAAEP,QAAQ,IACxB,EAAKQ,aA/II,KA4Ib,mB,GA5HiCsC,a,SCHxBC,E,4MACnBhD,MAAe,CACbiD,QAAS,GACTC,MAAO,G,iMAIsB3E,KAAK+B,MAA1Be,E,EAAAA,OAAQlB,E,EAAAA,S,SAEIqB,QAAQC,IAC1B,YAAItB,GACDgD,QAAO,uCAAmBvC,WAC1BzB,KAAI,YAAa,IAAXP,EAAU,oBACf,OAAOyC,EAAO+B,gBAAgBxE,O,OAJ9ByE,E,OAON9E,KAAKiC,SAAS,CACZyC,QAASI,EAAMC,S,qIAIVlE,EAAYsC,GAAwC,IAErDwB,EAAU3E,KAAKyB,MAAfkD,MACcxB,EAAEC,OAAdf,SAGNrC,KAAK+B,MAAMiD,UAAUnE,GACrB8D,GAAS9D,EAAKC,QAEdd,KAAK+B,MAAMkD,aAAapE,GACxB8D,GAAS9D,EAAKC,OAGhBd,KAAKiC,SAAS,CAAE0C,MAAOA,M,+BAGf,IAAD,OACP,OACE,6BACE,kBAACrB,EAAA,EAAD,CAAWC,OAAK,GACd,uDAGF,kBAAC2B,EAAA,EAAKC,MAAN,KACE,kBAACxB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,6BACA,6BACA,oCACA,qCACA,uCAGJ,+BACG9D,KAAKyB,MAAMiD,QAAQ9D,KAAI,SAACC,GACvB,OACE,wBAAIG,IAAKH,EAAKX,MACZ,4BACE,2BACE8D,KAAK,WACLlD,MAAOD,EAAKX,KAAOW,EAAKE,KACxBkD,SAAU,EAAKA,SAASC,KAAK,EAAMrD,GACnCwB,QAAS,EAAKN,MAAM2C,QAAQU,IAAIvE,EAAKG,UAGzC,4BACE,kBAAC,IAAD,CAAiBmD,KAAMtD,EAAKX,MAC1B,kBAAC,IAAD,CAAakE,MAAO,CAAEC,OAAQ,eAGlC,4BACGxD,EAAKX,KAAKmF,OAAO,EAAG,IADvB,MAEGxE,EAAKX,KAAKmF,OAAOxE,EAAKX,KAAKsC,OAAS,KAEvC,4BAAK3B,EAAKE,MACV,4BAAKK,EAASP,EAAKC,OAAOwE,WAA1B,oB,GA7EuBd,a,gBCWrCe,EAAgB,kBACpB,kBAACjB,EAAA,EAAD,CAAQkB,QAAQ,UAAUC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACV5D,KAAK,KACL6D,KAAK,SACLC,cAAY,SAEd,0BAAMrC,UAAU,WAAhB,gBAIiBsC,E,4MACnBtE,MAAe,CACbuE,UAAW,GACXC,SAAU,EACVC,MAAO,EACPC,WAAW,EACXC,WAAW,G,kEAIX,IAAIzB,EAAQ,EACZ3E,KAAK+B,MAAM2C,QAAQ2B,SAAQ,SAACxF,GAAD,OAAW8D,GAAS9D,EAAKC,SACpDd,KAAKiC,SAAS,CAAEgE,SAAUtB,M,sEAGf1D,G,8EACXjB,KAAKiC,SAAS,CAAEmE,WAAW,I,kBAGNpG,KAAK+B,MAAMe,OAAOwD,YAAYrF,G,OAA3CsF,E,OACNvG,KAAKiC,SAAS,CAAEsE,KAAMA,I,gDAEtBvG,KAAKiC,SAAS,CAAEuE,MAAM,EAAD,K,QAEvBxG,KAAKiC,SAAS,CAAEmE,WAAW,I,mSAK3BpG,KAAKiC,SAAS,CACZuE,WAAOC,EACPC,WAAOD,EACPF,UAAME,EACNN,WAAW,I,EAE0BnG,KAAKyB,MAApCuE,E,EAAAA,UAAWC,E,EAAAA,SAAUC,E,EAAAA,M,WAEmBlG,KAAK+B,MAA3Ca,E,EAAAA,OAAQE,E,EAAAA,OAAQlB,E,EAAAA,SAAU8C,E,EAAAA,Q,KAChB/B,E,KAChBC,E,KAEAqD,EAAWC,E,SACLjD,QAAQC,IACZ,YAAIwB,GAAS9D,IAAb,uCAAiB,+BAAA+F,EAAA,gFAAU9F,EAAV,uBAEFiC,EAAO8D,kBAAkB/F,EAAKX,MAF5B,+BAGN0B,EAASQ,IAAIvB,EAAKR,MAAOyB,MAHnB,MAEbb,IAFa,KAGba,MAHa,WAIVjB,EAJU,kFAAjB,wD,+BAQFmF,E,eAbuBa,kB,uCAArBH,E,OAgBJ1G,KAAKiC,SAAS,CACZyE,MAAOA,I,kDAGT1G,KAAKiC,SAAS,CAAEuE,MAAM,EAAD,K,QAEvBxG,KAAKiC,SAAS,CAAEkE,WAAW,I,mJAGhBW,GAA+C,IAAD,EACnCA,EAAM1D,OAAtB2D,EADmD,EACnDA,KAAMjG,EAD6C,EAC7CA,MACZd,KAAKiC,SAAL,eACG8E,EAAOjG,M,+BAIF,IAAD,SAC2Bd,KAAKyB,MAA/BwE,EADD,EACCA,SAAUS,EADX,EACWA,MAAOH,EADlB,EACkBA,KACzB,OACE,6BACE,kBAACjD,EAAA,EAAD,CAAWC,OAAK,GACd,8CACA,uFAEF,kBAAC2B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAY6B,UAAU,aACpB,kBAAC9B,EAAA,EAAK+B,MAAN,kBACA,kBAAC/B,EAAA,EAAKgC,QAAN,CACElD,KAAK,OACLmD,YAAY,UACZJ,KAAK,YACL9C,SAAUjE,KAAKoH,aAAalD,KAAKlE,SAIrC,kBAACkF,EAAA,EAAKC,MAAN,CAAY6B,UAAU,YACpB,kBAAC9B,EAAA,EAAK+B,MAAN,eACA,kBAAC/B,EAAA,EAAKgC,QAAN,CACElD,KAAK,SACLmD,YAAa/F,EAAS6E,GAAUX,WAChC+B,UAAQ,KAIZ,kBAACnC,EAAA,EAAKC,MAAN,CAAY6B,UAAU,SACpB,kBAAC9B,EAAA,EAAK+B,MAAN,wBACA,kBAAC/B,EAAA,EAAKgC,QAAN,CACElD,KAAK,SACLmD,YAAY,MACZJ,KAAK,QACL9C,SAAUjE,KAAKoH,aAAalD,KAAKlE,SAIrC,kBAACkF,EAAA,EAAKC,MAAN,MACInF,KAAKyB,MAAM0E,WACX,kBAAC7B,EAAA,EAAD,CACEkB,QAAQ,UACRxB,KAAK,SACLO,QAAS,kBAAM,EAAKsC,sBAHtB,QAQD7G,KAAKyB,MAAM0E,WAAa,kBAAC,EAAD,OAG1BO,GACC,kBAACxB,EAAA,EAAKC,MAAN,CAAY6B,UAAU,SACpB,kBAAC9B,EAAA,EAAK+B,MAAN,eACA,kBAAC/B,EAAA,EAAKgC,QAAN,CAAclD,KAAK,OAAOlD,MAAO4F,EAAOW,UAAQ,KAInDX,IAAUH,GACT,kBAACrB,EAAA,EAAKC,MAAN,CAAY6B,UAAU,WAClBhH,KAAKyB,MAAM2E,WACX,kBAAC9B,EAAA,EAAD,CACEkB,QAAQ,UACRxB,KAAK,SACLO,QAAS,kBAAM,EAAK+C,OAAOZ,KAH7B,QAQD1G,KAAKyB,MAAM2E,WAAa,kBAAC,EAAD,OAI5BG,GACC,kBAACjC,EAAA,EAAD,CAAQC,QAAS,kBAAMgD,OAAOC,KH1HnC,SAAmBjB,GACxB,MAAM,6CAAN,OAAoDA,GGyHPkB,CAAUlB,MAC1CA,EADH,IACS,kBAAC,IAAD,CAAmB9C,UAAU,UAIvCzD,KAAKyB,MAAM+E,OACV,kBAACtB,EAAA,EAAKC,MAAN,KACE,kBAACuC,EAAA,EAAD,CAAO1G,IAAI,YAAYwE,QAAQ,UAC5BxF,KAAKyB,MAAM+E,MAAMmB,gB,GAxJOnD,aChBpBoD,E,kDASnB,WAAY7F,GAAe,IAAD,8BACxB,cAAMA,IATRN,MAAe,CACbqB,OAAQ,IAAInD,EACZiC,SAAU,IAAIC,IACd6C,QAAS,IAAI7C,IACbgG,YAAa,EACbC,cAAc,GAKd,EAAKC,MAAQ,EAAKA,MAAM7D,KAAX,gBACb,EAAK8D,MAAQ,EAAKA,MAAM9D,KAAX,gBAHW,E,6KAOxBlE,KAAKiC,SAAS,CAAE6F,cAAc,I,kBAKVnF,Y,cAAZsF,E,gBACAtF,mBAAwBsF,EAAK,G,OACnCjI,KAAKiC,SAAS,CAAEW,OAAQqF,I,kDAExBjI,KAAKiC,SAAS,CAAEuE,MAAM,EAAD,K,QAEvBxG,KAAKiC,SAAS,CAAE6F,cAAc,I,8IAI9B,IAAID,EAAc7H,KAAKyB,MAAMoG,YAC7BA,EAAcA,GAAe,EAAI,EAAIA,EAAc,EACnD7H,KAAKiC,SAAS,CACZ4F,YAAaA,M,8BAKf,IAAIA,EAAc7H,KAAKyB,MAAMoG,YAC7BA,EAAcA,GAAe,EAAI,EAAIA,EAAc,EACnD7H,KAAKiC,SAAS,CACZ4F,YAAaA,M,oCAkDHxH,EAAc8B,GAA+C,IACjEP,EAAa5B,KAAKyB,MAAlBG,SACRA,EAASU,IACPjC,EACA8B,EAAGP,EAASQ,IAAI/B,IAAS,CAAEgC,SAAS,EAAOP,MAAO,EAAGhB,MAAO,KAE9Dd,KAAKiC,SAAS,CAAEL,e,2CAGGvB,GAAe,IAC1BqE,EAAY1E,KAAKyB,MAAjBiD,QACRA,EAAQ2B,SAAQ,SAACxF,GACXR,IAASQ,EAAKR,MAChBqE,EAAQwD,OAAOrH,EAAKG,UAGxBhB,KAAKiC,SAAS,CAAEyC,c,gCAGR7D,GAAmB,IACnB6D,EAAY1E,KAAKyB,MAAjBiD,QACRA,EAAQpC,IAAIzB,EAAKG,MAAOH,GACxBb,KAAKiC,SAAS,CAAEyC,c,mCAGL7D,GAAmB,IACtB6D,EAAY1E,KAAKyB,MAAjBiD,QACRA,EAAQwD,OAAOrH,EAAKG,OACpBhB,KAAKiC,SAAS,CAAEyC,c,+BAGR,IAAD,OACP,OACE,yBAAKjB,UAAU,QACXzD,KAAKyB,MAAMmB,QACX,kBAACuF,EAAA,EAAD,CAAW1E,UAAU,OACnB,kBAACH,EAAA,EAAD,CAAWC,OAAK,GACd,mDACA,qEAGF,kBAACC,EAAA,EAAD,CAAKC,UAAU,8BACXzD,KAAKyB,MAAMqG,cACX,kBAACxD,EAAA,EAAD,CAAQkB,QAAQ,UAAUjB,QAAS,kBAAM,EAAK6D,YAA9C,WAKDpI,KAAKyB,MAAMqG,cACV,kBAACxD,EAAA,EAAD,CAAQkB,QAAQ,UAAUC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACV5D,KAAK,KACL6D,KAAK,SACLC,cAAY,SAEd,0BAAMrC,UAAU,WAAhB,gBAKLzD,KAAKyB,MAAM+E,OACV,kBAAChD,EAAA,EAAD,CAAKC,UAAU,kCACb,kBAACiE,EAAA,EAAD,CAAO1G,IAAI,YAAYwE,QAAQ,UAC5BxF,KAAKyB,MAAM+E,MAAMmB,WAM3B3H,KAAKyB,MAAMmB,QACV,kBAACuF,EAAA,EAAD,CAAW1E,UAAU,OACS,IAA3BzD,KAAKyB,MAAMoG,aACV,kBAAC,EAAD,eACEtF,cAAevC,KAAKuC,cAAc2B,KAAKlE,MACvCqD,qBAAsBrD,KAAKqD,qBAAqBa,KAAKlE,MACrD4C,OAAQ5C,KAAKyB,MAAMmB,QACf5C,KAAKyB,QAGe,IAA3BzB,KAAKyB,MAAMoG,aACV,kBAAC,EAAD,eACE7C,UAAWhF,KAAKgF,UAAUd,KAAKlE,MAC/BiF,aAAcjF,KAAKiF,aAAaf,KAAKlE,MACrC4C,OAAQ5C,KAAKyB,MAAMmB,QACf5C,KAAKyB,QAGe,IAA3BzB,KAAKyB,MAAMoG,aACV,kBAAC,EAAD,eAAajF,OAAQ5C,KAAKyB,MAAMmB,QAAY5C,KAAKyB,QAElDzB,KAAKqI,eACLrI,KAAKsI,e,qCAxId,OAFkBtI,KAAKyB,MAAMoG,YAEX,EAEd,kBAACvD,EAAA,EAAD,CACEkB,QAAQ,YACR/B,UAAU,aACVO,KAAK,SACLO,QAASvE,KAAKgI,OAJhB,YAUG,O,iCAGS,IAAD,EAC0BhI,KAAKyB,MAAxCoG,EADS,EACTA,YAAajG,EADJ,EACIA,SAAU8C,EADd,EACcA,QAE7B,OACkB,IAAhBmD,GAIM,IAHN,YAAIjG,GAAU2G,QACZ,SAAC5D,EAAD,UAAsBA,GAAtB,oBAAoCtC,QAAU,EAAI,KAClD,IAIuB,IAAhBwF,GAAsC,IAAjBnD,EAAQ1C,KAD/B,KAGE6F,EAAc,EAErB,kBAACvD,EAAA,EAAD,CACEkB,QAAQ,UACR/B,UAAU,cACVO,KAAK,SACLO,QAASvE,KAAK+H,OAJhB,QAUG,S,GAzFsBvD,aChBbgE,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnG,MAAK,SAAAoG,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACL+C,QAAQ/C,MAAMA,EAAMmB,a,mUE3H5B,SAAS6B,EAAWC,EAAaC,GAC/B,IAAMzI,EAAMwI,EAAInE,SAAS,IACnBqE,EAASC,EAAOC,KACpB5I,EAAI6I,SAAiB,EAARJ,EAAW,KAAKK,MAAM,EAAW,EAARL,GACtC,OAGF,OADAC,EAAOK,UACAL,EAOT,SAASM,EAAWC,EAAcpI,GAChC,MAAM,GAAN,OALF,SAAsBoI,GACpB,MAAM,GAAN,OAAUA,EAAKC,QAAf,aAA2BD,EAAKE,SAAhC,aAA6CF,EAAKG,QAAlD,aAA8DH,EAAKI,QAIzDC,CAAaL,GAAvB,YAAgCpI,GAIlC,IAAM0I,EAAkB,CAAEL,QAAS,GAAIC,SAAU,EAAGC,QAAS,EAAGC,OAAQ,GAEjE,SAAelC,IAAtB,+B,4CAAO,4BAAAzB,EAAA,sEACmB8D,IADnB,cACCC,EADD,yBAEE,IAAIC,IAAOD,IAFb,4C,sBAKA,SAAeE,EAAtB,oC,4CAAO,WACL3C,EACAnG,GAFK,eAAA6E,EAAA,sEAIasB,EAAI4C,mBAAmBZ,EAAWO,EAAS1I,GAAQ,CACnEgJ,OAAQ,WALL,cAIC9J,EAJD,yBAOEA,EAAI+J,gBAPN,4C,sBAWA,SAAelE,EAAtB,wC,4CAAO,WACLoB,EACA+C,EACAlG,EACAmG,GAJK,mBAAAtE,EAAA,6DAMCuE,EAAMpG,EAAMlE,KAAI,SAACC,GACrB,OAAO,aACLsK,GAAIlD,EAAImD,iBAAiBvK,EAAKI,KAAK,IAChCJ,MAIDwK,EAASC,WAAiBC,OAAO,CACrCC,QAASP,EACTQ,QAASH,WAAiBI,UAGtBC,EAAe1D,EAClB2D,4BAA4B,CAC3BC,QAASjC,EAAOC,KAAK,WAAY,OACjCiC,OAAQ,GACRpH,QAAS,CACP,CACEsG,OAAQxB,EAAWuC,OAAOf,GAAS,GACnCK,OAAQA,EAAOW,WAIpB1G,SAAS,OA7BP,kBA+BE2C,EAAIgE,4BAA4B,CACrCH,OAAQZ,EAAItK,KAAI,SAACC,GACf,MAAO,CAACA,EAAKsK,GAAItK,EAAKE,KAAM,KAAM,SAEpCmL,kBAAmBhB,EAAItK,KAAI,SAACuK,GAAD,OAAQlB,EAAWO,EAASW,EAAGrJ,UAC1DqK,gBAAiBR,EACjBS,QAAQ,EACRC,YAAa,CAAC,UAAW,aAtCtB,4C,sBA0CP,IAAMC,EAAiB,uCAAG,8BAAA3F,EAAA,sEAEE4F,IAAgBC,cAFlB,cAElBA,EAFkB,yBAItBA,GACwB,aAAxB,UAAAC,IAASC,UAAT,eAAaC,SACK,UAAlBF,IAAS1F,MANa,2CAAH,qDAUjB0D,EAAkB,uCAAG,sBAAA9D,EAAA,sEACJ2F,IADI,2DAGhBC,IAAgBK,UAHA,gCAKhBC,IAAaD,OAxGH,IACI,MAkGE,2CAAH,sD","file":"static/js/main.4c194ec8.chunk.js","sourcesContent":["import * as esplora from \"@interlay/esplora-btc-api\";\nimport * as bitcoin from \"bitcoinjs-lib\";\n\nexport interface UTXO {\n  txid: string;\n  value: number;\n  vout: number;\n  addr: string;\n\n  key(): string;\n}\n\nexport interface AccountInfo {\n  checked: boolean;\n  index: number;\n  value: number;\n}\n\nexport class BitcoinApi {\n  txApi: esplora.TxApi;\n  addrApi: esplora.AddressApi;\n  blockApi: esplora.BlockApi;\n\n  constructor() {\n    const basePath = \"https://blockstream.info/testnet/api\";\n    this.txApi = new esplora.TxApi({ basePath: basePath });\n    this.addrApi = new esplora.AddressApi({ basePath: basePath });\n    this.blockApi = new esplora.BlockApi({ basePath: basePath });\n  }\n\n  async getHexTransaction(txid: string): Promise<string> {\n    return (await this.txApi.getTxHex(txid)).data;\n  }\n\n  // accumulated account balance\n  async getAccountValue(addr: string): Promise<number> {\n    const info = (await this.addrApi.getAddress(addr)).data;\n    return (\n      (info.chain_stats.funded_txo_sum || 0) -\n      (info.chain_stats.spent_txo_sum || 0)\n    );\n  }\n\n  // all unspent outputs for an account\n  async getAccountUtxos(addr: string): Promise<Array<UTXO>> {\n    const info = (await this.addrApi.getAddressUtxo(addr)).data;\n    return info.map((utxo) => {\n      return {\n        txid: utxo.txid,\n        value: utxo.value,\n        vout: utxo.vout,\n        addr: addr,\n\n        key: () => {\n          return `${utxo.txid}${utxo.vout}`;\n        },\n      };\n    });\n  }\n\n  async broadcastTx(hex: string) {\n    const result = await this.txApi.postTx(hex);\n    return result.data;\n  }\n}\n\nexport function getTxLink(txId: string) {\n  return `https://www.blockchain.com/btc-testnet/tx/${txId}`;\n}\n\nexport function getTxId(hex: string) {\n  const tx = bitcoin.Transaction.fromHex(hex);\n  return tx.getId();\n}\n\nexport function satToBtc(sat: number) {\n  // TODO: use big int library\n  return sat / Math.pow(10, 8);\n}\n","import React, { Component } from \"react\";\nimport { BitcoinApi, satToBtc, AccountInfo } from \"../bitcoin\";\nimport * as ledger from \"../ledger\";\nimport { Row, Col, Table, Button, Jumbotron } from \"react-bootstrap\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { FaClipboard } from \"react-icons/fa\";\n\nconst ENTRIES_PER_PAGE = 3;\n\ninterface Props {\n  appBtc: ledger.AppBtc;\n  apiBtc: BitcoinApi;\n  accounts: Map<string, AccountInfo>;\n  updateAccount(addr: string, cb: (info: AccountInfo) => AccountInfo): void;\n  removeAccountOutputs(addr: string): void;\n}\n\ninterface State {\n  loaded: boolean;\n  accIndex: number;\n  accounts: Map<string, AccountInfo>;\n}\n\nexport default class SelectAddresses extends Component<Props, State> {\n  state: State = {\n    loaded: false,\n    accIndex: 0,\n    accounts: new Map<string, AccountInfo>(),\n  };\n\n  async componentDidMount() {\n    const index = this.props.accounts.size;\n    this.setState({\n      accounts: this.props.accounts,\n      accIndex: index,\n    });\n    if (index === 0) {\n      await this.loadAccounts(ENTRIES_PER_PAGE);\n    } else {\n      this.setState({ loaded: true });\n    }\n  }\n\n  updateAccount(addr: string, cb: (info: AccountInfo) => AccountInfo): void {\n    const { accounts } = this.state;\n    const info = cb(\n      accounts.get(addr) || { checked: false, index: 0, value: 0 }\n    );\n    accounts.set(addr, info);\n    this.setState({ accounts });\n    this.props.updateAccount(addr, () => info);\n  }\n\n  async loadAccounts(length: number) {\n    const index = this.state.accIndex;\n    let promises = [];\n    for (let i = index; i < index + length; i++) {\n      const addr = await ledger.getWalletAddress(this.props.appBtc, i);\n      const accounts = this.state.accounts;\n      const info = { checked: false, index: i, value: 0 };\n      this.updateAccount(addr, () => info);\n\n      promises.push(\n        // address fetching is slow so don't block\n        this.props.apiBtc.getAccountValue(addr).then((value) => {\n          const accounts = this.state.accounts;\n          this.updateAccount(addr, (info) => {\n            info.value = value;\n            return info;\n          });\n\n          this.setState({\n            accounts: accounts,\n          });\n        })\n      );\n\n      this.setState({\n        accounts: accounts,\n      });\n    }\n    await Promise.all(promises);\n    this.setState({\n      loaded: true,\n      accIndex: index + length,\n    });\n  }\n\n  onChange(addr: string, e: React.ChangeEvent<HTMLInputElement>) {\n    const { checked } = e.target;\n    this.updateAccount(addr, (info) => {\n      info.checked = checked;\n      return info;\n    });\n\n    // remove any checked utxos\n    if (!checked) {\n      this.props.removeAccountOutputs(addr);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Jumbotron fluid>\n          <h1>Select Addresses</h1>\n        </Jumbotron>\n\n        <Row className=\"justify-content-md-center\">\n          <Col>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th></th>\n                  <th></th>\n                  <th>Address</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {[...this.state.accounts].map((acc) => {\n                  return (\n                    <tr key={acc[0]}>\n                      <td>\n                        <input\n                          type=\"checkbox\"\n                          value={acc[0]}\n                          onChange={this.onChange.bind(this, acc[0])}\n                          checked={acc[1].checked}\n                        />\n                      </td>\n                      <td>\n                        <CopyToClipboard text={acc[0]}>\n                          <FaClipboard style={{ cursor: \"pointer\" }} />\n                        </CopyToClipboard>\n                      </td>\n                      <td>{acc[0]}</td>\n                      <td>{satToBtc(acc[1].value)} BTC</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          {this.state.loaded && (\n            <Button\n              onClick={() => {\n                this.setState({ loaded: false });\n                this.loadAccounts(ENTRIES_PER_PAGE);\n              }}\n            >\n              Show More\n            </Button>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BitcoinApi, satToBtc, UTXO, AccountInfo } from \"../bitcoin\";\nimport { Table, Form, Jumbotron } from \"react-bootstrap\";\nimport { FaClipboard } from \"react-icons/fa\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ninterface Props {\n  apiBtc: BitcoinApi;\n  accounts: Map<string, AccountInfo>;\n  outputs: Map<string, UTXO>;\n  addOutput(utxo: UTXO): void;\n  removeOutput(utxo: UTXO): void;\n}\n\ninterface State {\n  outputs: Array<UTXO>;\n  total: number;\n}\n\n// TODO: poll update utxos\nexport default class SelectOutputs extends Component<Props> {\n  state: State = {\n    outputs: [],\n    total: 0,\n  };\n\n  async componentDidMount() {\n    const { apiBtc, accounts } = this.props;\n    // fetch all account utxos\n    const utxos = await Promise.all(\n      [...accounts]\n        .filter(([, info]) => info.checked)\n        .map(([addr]) => {\n          return apiBtc.getAccountUtxos(addr);\n        })\n    );\n    this.setState({\n      outputs: utxos.flat(),\n    });\n  }\n\n  onChange(utxo: UTXO, e: React.ChangeEvent<HTMLInputElement>) {\n    // TODO: display active total\n    let { total } = this.state;\n    const { checked } = e.target;\n\n    if (checked) {\n      this.props.addOutput(utxo);\n      total += utxo.value;\n    } else {\n      this.props.removeOutput(utxo);\n      total -= utxo.value;\n    }\n\n    this.setState({ total: total });\n  }\n\n  render() {\n    return (\n      <div>\n        <Jumbotron fluid>\n          <h1>Select Unspent Outputs</h1>\n        </Jumbotron>\n\n        <Form.Group>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th></th>\n                <th></th>\n                <th>TxID</th>\n                <th>Index</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.outputs.map((utxo) => {\n                return (\n                  <tr key={utxo.txid}>\n                    <td>\n                      <input\n                        type=\"checkbox\"\n                        value={utxo.txid + utxo.vout}\n                        onChange={this.onChange.bind(this, utxo)}\n                        checked={this.props.outputs.has(utxo.key())}\n                      />\n                    </td>\n                    <td>\n                      <CopyToClipboard text={utxo.txid}>\n                        <FaClipboard style={{ cursor: \"pointer\" }} />\n                      </CopyToClipboard>\n                    </td>\n                    <td>\n                      {utxo.txid.substr(0, 10)}...\n                      {utxo.txid.substr(utxo.txid.length - 10)}\n                    </td>\n                    <td>{utxo.vout}</td>\n                    <td>{satToBtc(utxo.value).toString()} BTC</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Form.Group>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BitcoinApi, satToBtc, UTXO, AccountInfo, getTxLink } from \"../bitcoin\";\nimport * as ledger from \"../ledger\";\nimport { Button, Form, Jumbotron, Alert, Spinner } from \"react-bootstrap\";\nimport { FaExternalLinkAlt } from \"react-icons/fa\";\n\ntype FormControlElement =\n  | HTMLInputElement\n  | HTMLSelectElement\n  | HTMLTextAreaElement;\n\ninterface Props {\n  appBtc: ledger.AppBtc;\n  apiBtc: BitcoinApi;\n  accounts: Map<string, AccountInfo>;\n  outputs: Map<string, UTXO>;\n}\n\ninterface State {\n  // TODO: allow multiple outputs\n  recipient: string;\n  satoshis: number;\n  txFee: number;\n  isSigning: boolean;\n  isSending: boolean;\n\n  txId?: string;\n  txHex?: string;\n  error?: Error;\n}\n\nconst LoadingButton = () => (\n  <Button variant=\"primary\" disabled>\n    <Spinner\n      as=\"span\"\n      animation=\"border\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    <span className=\"sr-only\">Loading...</span>\n  </Button>\n);\n\nexport default class SignAndSend extends Component<Props> {\n  state: State = {\n    recipient: \"\",\n    satoshis: 0,\n    txFee: 0,\n    isSigning: false,\n    isSending: false,\n  };\n\n  componentDidMount() {\n    let total = 0;\n    this.props.outputs.forEach((utxo) => (total += utxo.value));\n    this.setState({ satoshis: total });\n  }\n\n  async sendTx(hex: string) {\n    this.setState({ isSending: true });\n\n    try {\n      const txId = await this.props.apiBtc.broadcastTx(hex);\n      this.setState({ txId: txId });\n    } catch (error) {\n      this.setState({ error: error });\n    }\n    this.setState({ isSending: false });\n  }\n\n  async createTransaction() {\n    // clear error and previous raw tx\n    this.setState({\n      error: undefined,\n      txHex: undefined,\n      txId: undefined,\n      isSigning: true,\n    });\n    const { recipient, satoshis, txFee } = this.state;\n    try {\n      const { appBtc, apiBtc, accounts, outputs } = this.props;\n      let txHex = await ledger.createTransaction(\n        appBtc,\n        // fee is leftover\n        satoshis - txFee,\n        await Promise.all(\n          [...outputs].map(async ([, utxo]) => {\n            return {\n              hex: await apiBtc.getHexTransaction(utxo.txid),\n              index: accounts.get(utxo.addr)!.index,\n              ...utxo,\n            };\n          })\n        ),\n        recipient\n      );\n      // TODO: automatically publish?\n      this.setState({\n        txHex: txHex,\n      });\n    } catch (error) {\n      this.setState({ error: error });\n    }\n    this.setState({ isSigning: false });\n  }\n\n  handleChange(event: React.ChangeEvent<FormControlElement>) {\n    let { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { satoshis, txHex, txId } = this.state;\n    return (\n      <div>\n        <Jumbotron fluid>\n          <h1>Confirm & Sign</h1>\n          <p>Enter the recipient and transaction fee before signing.</p>\n        </Jumbotron>\n        <Form>\n          <Form.Group controlId=\"toAddress\">\n            <Form.Label>Recipient</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Address\"\n              name=\"recipient\"\n              onChange={this.handleChange.bind(this)}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"toAmount\">\n            <Form.Label>Amount</Form.Label>\n            <Form.Control\n              type=\"number\"\n              placeholder={satToBtc(satoshis).toString()}\n              readOnly\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"txFee\">\n            <Form.Label>Transaction Fee</Form.Label>\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Fee\"\n              name=\"txFee\"\n              onChange={this.handleChange.bind(this)}\n            />\n          </Form.Group>\n\n          <Form.Group>\n            {!this.state.isSigning && (\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                onClick={() => this.createTransaction()}\n              >\n                Sign\n              </Button>\n            )}\n            {this.state.isSigning && <LoadingButton />}\n          </Form.Group>\n\n          {txHex && (\n            <Form.Group controlId=\"txHex\">\n              <Form.Label>Raw Tx</Form.Label>\n              <Form.Control type=\"text\" value={txHex} readOnly />\n            </Form.Group>\n          )}\n\n          {txHex && !txId && (\n            <Form.Group controlId=\"sendTx\">\n              {!this.state.isSending && (\n                <Button\n                  variant=\"primary\"\n                  type=\"button\"\n                  onClick={() => this.sendTx(txHex)}\n                >\n                  Send\n                </Button>\n              )}\n              {this.state.isSending && <LoadingButton />}\n            </Form.Group>\n          )}\n\n          {txId && (\n            <Button onClick={() => window.open(getTxLink(txId))}>\n              {txId} <FaExternalLinkAlt className=\"ml-2\" />\n            </Button>\n          )}\n\n          {this.state.error && (\n            <Form.Group>\n              <Alert key=\"ledgerErr\" variant=\"danger\">\n                {this.state.error.message}\n              </Alert>\n            </Form.Group>\n          )}\n        </Form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BitcoinApi, UTXO, AccountInfo } from \"./bitcoin\";\nimport * as ledger from \"./ledger\";\nimport {\n  Container,\n  Jumbotron,\n  Spinner,\n  Button,\n  Alert,\n  Row,\n} from \"react-bootstrap\";\nimport \"./App.css\";\nimport SelectAddresses from \"./components/SelectAddresses\";\nimport SelectOutputs from \"./components/SelectOutputs\";\nimport SignAndSend from \"./components/SignAndSend\";\n\ninterface Props {}\n\ninterface State {\n  appBtc?: ledger.AppBtc;\n  apiBtc: BitcoinApi;\n  accounts: Map<string, AccountInfo>;\n  outputs: Map<string, UTXO>;\n  currentStep: number;\n  isConnecting: boolean;\n  error?: Error;\n}\n\nexport default class App extends Component<Props, State> {\n  state: State = {\n    apiBtc: new BitcoinApi(),\n    accounts: new Map<string, AccountInfo>(),\n    outputs: new Map<string, UTXO>(),\n    currentStep: 1,\n    isConnecting: false,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this._next = this._next.bind(this);\n    this._prev = this._prev.bind(this);\n  }\n\n  async connect() {\n    this.setState({ isConnecting: true });\n    try {\n      // ensures that the device is connected\n      // and working, user may need to exit\n      // and re-enter app if device falls asleep\n      const app = await ledger.connect();\n      await ledger.getWalletAddress(app, 0);\n      this.setState({ appBtc: app });\n    } catch (error) {\n      this.setState({ error: error });\n    }\n    this.setState({ isConnecting: false });\n  }\n\n  _next() {\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep >= 3 ? 3 : currentStep + 1;\n    this.setState({\n      currentStep: currentStep,\n    });\n  }\n\n  _prev() {\n    let currentStep = this.state.currentStep;\n    currentStep = currentStep <= 0 ? 0 : currentStep - 1;\n    this.setState({\n      currentStep: currentStep,\n    });\n  }\n\n  get previousButton() {\n    let currentStep = this.state.currentStep;\n\n    if (currentStep > 1) {\n      return (\n        <Button\n          variant=\"secondary\"\n          className=\"float-left\"\n          type=\"button\"\n          onClick={this._prev}\n        >\n          Previous\n        </Button>\n      );\n    }\n    return null;\n  }\n\n  get nextButton() {\n    let { currentStep, accounts, outputs } = this.state;\n\n    if (\n      currentStep === 1 &&\n      [...accounts].reduce(\n        (total, [, info]) => (total += info.checked ? 1 : 0),\n        0\n      ) === 0\n    ) {\n      return null;\n    } else if (currentStep === 2 && outputs.size === 0) {\n      return null;\n    } else if (currentStep < 3) {\n      return (\n        <Button\n          variant=\"primary\"\n          className=\"float-right\"\n          type=\"button\"\n          onClick={this._next}\n        >\n          Next\n        </Button>\n      );\n    }\n    return null;\n  }\n\n  updateAccount(addr: string, cb: (info: AccountInfo) => AccountInfo): void {\n    const { accounts } = this.state;\n    accounts.set(\n      addr,\n      cb(accounts.get(addr) || { checked: false, index: 0, value: 0 })\n    );\n    this.setState({ accounts });\n  }\n\n  removeAccountOutputs(addr: string) {\n    const { outputs } = this.state;\n    outputs.forEach((utxo) => {\n      if (addr === utxo.addr) {\n        outputs.delete(utxo.key());\n      }\n    });\n    this.setState({ outputs });\n  }\n\n  addOutput(utxo: UTXO): void {\n    const { outputs } = this.state;\n    outputs.set(utxo.key(), utxo);\n    this.setState({ outputs });\n  }\n\n  removeOutput(utxo: UTXO): void {\n    const { outputs } = this.state;\n    outputs.delete(utxo.key());\n    this.setState({ outputs });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.appBtc && (\n          <Container className=\"p-3\">\n            <Jumbotron fluid>\n              <h1>Connect Your Device</h1>\n              <p>You may need to open the Bitcoin app.</p>\n            </Jumbotron>\n\n            <Row className=\"justify-content-md-center\">\n              {!this.state.isConnecting && (\n                <Button variant=\"primary\" onClick={() => this.connect()}>\n                  Connect\n                </Button>\n              )}\n\n              {this.state.isConnecting && (\n                <Button variant=\"primary\" disabled>\n                  <Spinner\n                    as=\"span\"\n                    animation=\"border\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  />\n                  <span className=\"sr-only\">Loading...</span>\n                </Button>\n              )}\n            </Row>\n\n            {this.state.error && (\n              <Row className=\"justify-content-md-center mt-3\">\n                <Alert key=\"ledgerErr\" variant=\"danger\">\n                  {this.state.error.message}\n                </Alert>\n              </Row>\n            )}\n          </Container>\n        )}\n        {this.state.appBtc && (\n          <Container className=\"p-3\">\n            {this.state.currentStep === 1 && (\n              <SelectAddresses\n                updateAccount={this.updateAccount.bind(this)}\n                removeAccountOutputs={this.removeAccountOutputs.bind(this)}\n                appBtc={this.state.appBtc}\n                {...this.state}\n              />\n            )}\n            {this.state.currentStep === 2 && (\n              <SelectOutputs\n                addOutput={this.addOutput.bind(this)}\n                removeOutput={this.removeOutput.bind(this)}\n                appBtc={this.state.appBtc}\n                {...this.state}\n              />\n            )}\n            {this.state.currentStep === 3 && (\n              <SignAndSend appBtc={this.state.appBtc} {...this.state} />\n            )}\n            {this.previousButton}\n            {this.nextButton}\n          </Container>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// YOU MUST ENABLE HTTPS FOR THIS TO WORK\n// HTTPS=true yarn start\n\nimport platform from \"platform\";\nimport u2fTransport from \"@ledgerhq/hw-transport-u2f\";\nimport webUsbTransport from \"@ledgerhq/hw-transport-webusb\";\nimport AppBtc from \"@ledgerhq/hw-app-btc\";\nimport * as bitcoin from \"bitcoinjs-lib\";\nimport { UTXO } from \"./bitcoin\";\n\nexport { AppBtc };\n\nconst OPEN_TIMEOUT = 10000;\nconst LISTENER_TIMEOUT = 300;\n\ntype KeySet = {\n  purpose: number;\n  coinType: number;\n  account: number;\n  change: number;\n};\n\nfunction toBufferLE(num: bigint, width: number) {\n  const hex = num.toString(16);\n  const buffer = Buffer.from(\n    hex.padStart(width * 2, \"0\").slice(0, width * 2),\n    \"hex\"\n  );\n  buffer.reverse();\n  return buffer;\n}\n\nfunction deriveKeySet(keys: KeySet) {\n  return `${keys.purpose}'/${keys.coinType}'/${keys.account}'/${keys.change}`;\n}\n\nfunction derivePath(keys: KeySet, index: number) {\n  return `${deriveKeySet(keys)}/${index}`;\n}\n\n// const MAINNET: KeySet = { purpose: 84, coinType: 0, account: 0, change: 0 };\nconst TESTNET: KeySet = { purpose: 84, coinType: 1, account: 0, change: 0 };\n\nexport async function connect(): Promise<AppBtc> {\n  const transport = await getLedgerTransport();\n  return new AppBtc(transport);\n}\n\nexport async function getWalletAddress(\n  app: AppBtc,\n  index: number\n): Promise<string> {\n  const key = await app.getWalletPublicKey(derivePath(TESTNET, index), {\n    format: \"bech32\",\n  });\n  return key.bitcoinAddress;\n}\n\n// currently only supports segwit\nexport async function createTransaction(\n  app: AppBtc,\n  amount: number,\n  utxos: Array<UTXO & { hex: string; index: number }>,\n  toAddress: string\n): Promise<string> {\n  const txs = utxos.map((utxo) => {\n    return {\n      tx: app.splitTransaction(utxo.hex, true),\n      ...utxo,\n    };\n  });\n\n  const script = bitcoin.payments.p2wpkh({\n    address: toAddress,\n    network: bitcoin.networks.testnet,\n  });\n\n  const outputScript = app\n    .serializeTransactionOutputs({\n      version: Buffer.from(\"01000000\", \"hex\"),\n      inputs: [],\n      outputs: [\n        {\n          amount: toBufferLE(BigInt(amount), 8),\n          script: script.output!,\n        },\n      ],\n    })\n    .toString(\"hex\");\n\n  return app.createPaymentTransactionNew({\n    inputs: txs.map((utxo) => {\n      return [utxo.tx, utxo.vout, null, null];\n    }),\n    associatedKeysets: txs.map((tx) => derivePath(TESTNET, tx.index)),\n    outputScriptHex: outputScript,\n    segwit: true,\n    additionals: [\"bitcoin\", \"bech32\"],\n  });\n}\n\nconst isWebUsbSupported = async (): Promise<boolean> => {\n  // https://github.com/MyEtherWallet/MyEtherWallet/blob/master/src/wallets/hardware/ledger/index.js#L145\n  const isSupported = await webUsbTransport.isSupported();\n  return (\n    isSupported &&\n    platform.os?.family !== \"Windows\" &&\n    platform.name !== \"Opera\"\n  );\n};\n\nconst getLedgerTransport = async () => {\n  const webUsb = await isWebUsbSupported();\n  if (webUsb) {\n    return webUsbTransport.create();\n  } else {\n    return u2fTransport.create(OPEN_TIMEOUT, LISTENER_TIMEOUT);\n  }\n};\n"],"sourceRoot":""}